import React, { useState } from "react";
import { useDrop } from "react-dnd";
import { ItemTypes } from "./constants";
import { canAddPic, addPic, canMovePic, movePic } from "./game";
import Pic from "./Pic";
import Overlay from "./Overlay";
import Square from "./Square";
<<<<<<< HEAD
import Pic from "./Pic";
=======
import { Type } from "typescript";
>>>>>>> main

type BoardSquareProps = {
    x: number;
    y: number;
    pics: string[];
};

const BoardSquare: React.FC<BoardSquareProps> = (props) => {
<<<<<<< HEAD
    const [square, setSquare] = useState<string>("");
    const { x, y, p, children } = props;
=======
    const { x, y, pics, children } = props;
>>>>>>> main
    const black = (x + y) % 2 === 1;
    const [square, setSquare] = useState<string[]>([]);
    //const [square, setSquare] = useState<string[]>([]);
    const [{ isOver, canDrop }, drop] = useDrop({
        accept: ItemTypes.PIC,
        canDrop: () => canMovePic(x, y),
<<<<<<< HEAD
        drop: (item) => addImageToBoard(item.pic),
=======
        drop: (item: { type: string; pic: string }) =>
            addImageToBoard(item.pic),
>>>>>>> main
        collect: (monitor) => ({
            isOver: !!monitor.isOver(),
            canDrop: !!monitor.canDrop()
        })
    });
    const addImageToBoard = (pic: string) => {
        const p = pics.filter((picture) => pic === picture);
        setSquare((square) => [...square, p[0]]);
    };
    // const [{ canAdd }, drop] = useDrop({
    //     accept: ItemTypes.PIC,
    //     canDrop: () => canAddPic(x, y),
    //     drop: () => addPic(x, y),
    //     collect: (monitor) => ({
    //         isOver: !!monitor.isOver(),
    //         canDrop: !!monitor.canDrop()
    //     })
    // });
    const addImageToBoard = (pic) => {
    	const p = pics.filter((picture: string) => pic === picture);
    	setSquare(p);
    	};

    return (
<<<<<<< HEAD
        <div
            ref={drop}
            style={{ position: "relative", width: "90%", height: "90%" }}
        >
            yo
            <Pic pic={square}/>
            <Square black={black}>{children}</Square>
            {isOver && !canDrop && <Overlay color="red" />}
            {!isOver && canDrop && <Overlay color="yellow" />}
            {isOver && canDrop && <Overlay color="green" />}
        </div>
=======
        <>
            <div
                ref={drop}
                style={{ position: "relative", width: "90%", height: "90%" }}
            >
                yo
                <Square black={black}>{children}</Square>
                {isOver && !canDrop && <Overlay color="red" />}
                {!isOver && canDrop && <Overlay color="yellow" />}
                {isOver && canDrop && <Overlay color="green" />}
                <ul>
                    {square.map(
                        (p: string): JSX.Element => (
                            <li key={p}>
                                <Square black={black}>{p}</Square>
                                {
                                    //<Pic pic={p} />
                                }
                            </li>
                        )
                    )}
                </ul>
            </div>
        </>
>>>>>>> main
    );
};

export default BoardSquare;
